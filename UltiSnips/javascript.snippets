global !p
fn_base = fn.split(os.extsep)[0];
lower_first = lambda s: s[:1].lower() + s[1:] if s else ''
endglobal

# -------------- r (react)
snippet rc "React Component"
/* beautify preserve:start */
import React, {PropTypes, Component} from 'react';
/* beautify preserve:end */

export default class `!p snip.rv = fn_base` extends Component {
	static propTypes = {
		${2:onMyAction: PropTypes.func.isRequired}
	}

	render() {
		return (${1:<div>Hello world</div>});
	}
}
endsnippet

snippet rfdn "React.findDOMNode"
const node${1/^\w+/\u$0/} = React.findDOMNode($1);
endsnippet

# --------- rpt
snippet rptr "PropTypes..isRequired"
$2: PropTypes.$1.isRequired
endsnippet

snippet rptar "PropTypes.array.isRequired"
$1: PropTypes.array.isRequired
endsnippet

snippet rptbr "PropTypes.bool.isRequired"
$1: PropTypes.func.isRequired
endsnippet

snippet rptnr "PropTypes.number.isRequired"
$1: PropTypes.number.isRequired
endsnippet

snippet rptfr "PropTypes.func.isRequired"
$1: PropTypes.func.isRequired
endsnippet

snippet rptor "PropTypes.object.isRequired"
$1: PropTypes.object.isRequired
endsnippet

snippet rptsr "PropTypes.string.isRequired"
$1: PropTypes.string.isRequired
endsnippet

snippet rpter "PropTypes.element.isRequired"
$1: PropTypes.element.isRequired
endsnippet

# -------------- rt(react test)
snippet rtc "React test for Component"
import React from 'react/addons';
import `!p snip.rv =  "{0} from './{0}'".format(fn_base)`;

const TestUtils = React.addons.TestUtils;

describe("`!p snip.rv = fn_base`", () => {

	$0

});
endsnippet

# find
snippet rtr "React TestUtils.renderIntoDocument"
const ${2/^\w/\l$0/} = TestUtils.renderIntoDocument(<${2:`!p snip.rv = fn_base`} ${1: }/>);
endsnippet

snippet rtfrdct "React TestUtils.findRenderedDOMComponentWithTag"
const $1 = TestUtils.findRenderedDOMComponentWithTag(${2:`!p snip.rv = lower_first(fn_base)`}, '${1:tag}');
endsnippet

snippet rtfrdcc "React TestUtils.findRenderedDOMComponentWithClass"
const $1 = TestUtils.findRenderedDOMComponentWithClass(${2:`!p snip.rv = lower_first(fn_base)`}, '${1:class}');
endsnippet

snippet rtfrct "React TestUtils.findRenderedComponentWithType"
const ${1/^\w+/\l$0/} = TestUtils.findRenderedComponentWithType(${2:`!p snip.rv = lower_first(fn_base)`}, ${1:Component});
endsnippet

# scry
snippet rtsrdct "React TestUtils.scryRenderedDOMComponentsWithTag"
const children${1/^\w+/\u$0/} = TestUtils.scryRenderedDOMComponentsWithTag(${2:`!p snip.rv = lower_first(fn_base)`}, '${1:tag}');
endsnippet

snippet rtsrdcc "React TestUtils.scryRenderedDOMComponentsWithClass"
const children${1/^\w+/\u$0/} = TestUtils.scryRenderedDOMComponentsWithClass(${2:`!p snip.rv = lower_first(fn_base)`}, '${1:class}');
endsnippet

snippet rtsrct "React TestUtils.scryRenderedComponentsWithType"
const children$1 = TestUtils.scryRenderedComponentsWithType(${2:`!p snip.rv = lower_first(fn_base)`}, ${1:Component});
endsnippet
